<div class="bg-white py-6 sm:py-8 lg:py-12 min-h-screen">
  <div class="mx-auto max-w-screen-xl px-4 md:px-8">
    <div class="grid gap-8 md:grid-cols-2 lg:gap-12">
      <div class="relative">
        <div class="overflow-hidden rounded-lg">
          <canvas id="canvas" class="w-full border-4 border-primary"></canvas>
        </div>
        <div class="my-4">
          <input type="radio" id="draw" name="mode" class="radio radio-primary" checked/>
          <label for="draw">ペン</label>
          <input type="radio" id="erase" name="mode" class="radio radio-primary">
          <label for="erase">消しゴム</label>
          <button id="clear" name="mode" class="btn btn-sm btn-outline btn-error">クリア</button>
        </div>
      </div>

      <div class="flex flex-col items-center justify-center md:pt-8">
        <div class="text-center mb-10">
          <p class="text-gray-700">「絵描き歌」を聴き、絵を描いてみましょう！</p>
          <p class="text-gray-700">何も難しくはありません。歌詞の通り描けばいいのです...。</p>
        </div>
        <div class="mt-4 mb-4">
          <%= audio_tag @drawing_song.song ,id: "audio", controls: true, controlslist: 'nodownload' %>
        </div>
        <%= form_with(model: @picture, url: drawing_song_pictures_path(@drawing_song), id: 'picture-form', authenticity_token: true) do |form| %>
          <div class="mt-8">
            <div class="mb-8">
              <div class="text-center mb-4 font-bold">
                <p>何の絵描き歌？</p>
              </div>
              <label for="name" class="block font-medium text-gray-700"><%= t('.guess') %></label>
              <input type="text" id="name" placeholder="未実装" class="block px-4 py-2 border border-gray-300 rounded-md">
            </div>
            <p class="text-gray-700">絵をスクショして保存してください</p>
            <%= form.file_field :image, id: 'picture_image_data' %>
            <%= form.button t('.decide'), class: "bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mt-4", id: 'save-button' %>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script type="module">
  import { fabric } from 'fabric';

  const canvas = new fabric.Canvas("canvas");

  function setCanvasSize() {
    const screenWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
    const screenHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
    const canvasContainer = document.querySelector('.overflow-hidden');
    const canvasSize = Math.min(screenWidth, screenHeight, canvasContainer.offsetWidth);

    canvas.setWidth(canvasSize);
    canvas.setHeight(canvasSize);
  }

  // ウィンドウのリサイズ時にキャンバスのサイズを調整する
  window.addEventListener('resize', function() {
    setCanvasSize();
  });

  // 初回読み込み時にキャンバスのサイズを設定する
  setCanvasSize();

  canvas.isDrawingMode = true;
  canvas.freeDrawingBrush.width = 5;

  document.getElementById("draw").addEventListener("click", function () {
    canvas.isDrawingMode = true;
    canvas.freeDrawingBrush = new fabric.PencilBrush(canvas);
    canvas.freeDrawingBrush.width = 5;
    canvas.freeDrawingBrush.color = "black";
  });

  document.getElementById("erase").addEventListener("click", function () {
    canvas.isDrawingMode = true;
    canvas.freeDrawingBrush = new fabric.PencilBrush(canvas);
    canvas.freeDrawingBrush.width = 20;
    canvas.freeDrawingBrush.color = "white";
  });

  document.getElementById("clear").addEventListener("click", function () {
    canvas.clear();
  });

</script>
